// <auto-generated />
using System;
using System.Collections.Generic;
using Atoms.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Atoms.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250914175102_AddGame")]
    partial class AddGame
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Atoms.Core.DTOs.GameDTO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AtomShape")
                        .HasColumnType("integer");

                    b.Property<int>("ColourScheme")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LocalStorageUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Move")
                        .HasColumnType("integer");

                    b.Property<int>("Round")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.ComplexProperty<Dictionary<string, object>>("Board", "Atoms.Core.DTOs.GameDTO.Board#BoardDTO", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Data")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Rng", "Atoms.Core.DTOs.GameDTO.Rng#RngDTO", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Iterations")
                                .HasColumnType("integer");

                            b1.Property<int>("Seed")
                                .HasColumnType("integer");
                        });

                    b.HasKey("Id");

                    b.HasIndex("LastUpdatedDateUtc");

                    b.HasIndex("LocalStorageUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Atoms.Core.DTOs.GameInfoDTO", b =>
                {
                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Move")
                        .HasColumnType("integer");

                    b.Property<string>("Opponents")
                        .HasColumnType("text");

                    b.Property<int>("Round")
                        .HasColumnType("integer");

                    b.Property<string>("Winner")
                        .HasColumnType("text");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("Atoms.Core.DTOs.LocalStorageUserDTO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LocalStorageUsers");
                });

            modelBuilder.Entity("Atoms.Core.DTOs.PlayerDTO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AbbreviatedName")
                        .HasColumnType("text");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<string>("InviteCode")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWinner")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LocalStorageUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("IsWinner");

                    b.HasIndex("LocalStorageUserId");

                    b.HasIndex("PlayerTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Atoms.Core.DTOs.PlayerTypeDTO", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PlayerTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Human",
                            Name = "Human"
                        },
                        new
                        {
                            Id = 2,
                            Description = "CPU (Easy)",
                            Name = "CPU (E)"
                        },
                        new
                        {
                            Id = 3,
                            Description = "CPU (Medium)",
                            Name = "CPU (M)"
                        },
                        new
                        {
                            Id = 4,
                            Description = "CPU (Hard)",
                            Name = "CPU (H)"
                        });
                });

            modelBuilder.Entity("Atoms.Core.DTOs.GameDTO", b =>
                {
                    b.HasOne("Atoms.Core.DTOs.LocalStorageUserDTO", "LocalStorageUser")
                        .WithMany("Games")
                        .HasForeignKey("LocalStorageUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LocalStorageUser");
                });

            modelBuilder.Entity("Atoms.Core.DTOs.PlayerDTO", b =>
                {
                    b.HasOne("Atoms.Core.DTOs.GameDTO", "Game")
                        .WithMany("Players")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Atoms.Core.DTOs.LocalStorageUserDTO", "LocalStorageUser")
                        .WithMany("Players")
                        .HasForeignKey("LocalStorageUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Atoms.Core.DTOs.PlayerTypeDTO", "PlayerType")
                        .WithMany()
                        .HasForeignKey("PlayerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("LocalStorageUser");

                    b.Navigation("PlayerType");
                });

            modelBuilder.Entity("Atoms.Core.DTOs.GameDTO", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("Atoms.Core.DTOs.LocalStorageUserDTO", b =>
                {
                    b.Navigation("Games");

                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
